# -*- coding: utf-8 -*-
"""Lazada Indonesian Reviews Analysis and Visualization with Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1saLdvSdxDVJAzvh1tZgNVdtq_k6GLlu9

**DATA EXPLORATION**

---



---
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.ticker as tick
import re
import os
# %matplotlib inline

df_items = pd.read_csv("/content/drive/My Drive/Dataset/Lazada-20191002-items.csv")
df_items

df_reviews = pd.read_csv("/content/drive/My Drive/Dataset/Lazada-20191002-reviews.csv")
df_reviews

df_items.info()

df_items.describe()

df_reviews.info()

df_reviews.describe()

"""**DATA CLEANING**

---



---

**1. Data cleaning untuk df_items**
"""

df_items.head(10)

#Mencari tahu apakah dalam 1 item terdapat lebih dari 1 category

df_items[df_items['itemId'] == 100002528]

#Menampilkan jumlah null values pada setiap kolom

pd.isnull(df_items).sum()

#Menampilkan jumlah category untuk setiap category

df_items.category.value_counts()

df_items.isnull()

df_items.columns

#Dibagi berdasarkan jumlah kategorinya.

#Melihat apakah setiap item memiliki satu kategory atau lebih
#Satu kategori

cat1 = len(pd.concat(g for _, g in df_items.groupby(['itemId']) if len(g) == 1))
df_items_cat1 = pd.concat(g for _, g in df_items.groupby(['itemId']) if len(g) == 1)
df_items_cat1.head()

#Menampilkan sampel data yang memiliki jumlah kategori = 1

print('Satu kategori :', cat1)
print(df_items_cat1.category.value_counts(), '\n')

#Melihat apakah setiap item memiliki dua kategory atau lebih
#Dua kategori

cat2 = len(pd.concat(g for _, g in df_items.groupby(['itemId']) if len(g) == 2))
df_items_cat2 = pd.concat(g for _, g in df_items.groupby(['itemId']) if len(g) == 2)
df_items_cat2.head()

#Menampilkan sampel data yang memiliki jumlah kategori = 2

print('Dua kategori :', cat2)
print(df_items_cat2.category.value_counts(), '\n')

#Melihat apakah setiap item memiliki tiga kategory atau lebih
#Tiga kategori

cat3 = len(pd.concat(g for _, g in df_items.groupby(['itemId']) if len(g) == 3))
df_items_cat3 = pd.concat(g for _, g in df_items.groupby(['itemId']) if len(g) == 3)
df_items_cat3.head()

#Menampilkan sampel data yang memiliki jumlah kategori = 3

print('Tiga kategori :', cat3)
print(df_items_cat3.category.value_counts(), '\n')

#Melihat apakah setiap item memiliki empat kategory atau lebih
#Empat kategori

cat4 = len(pd.concat(g for _, g in df_items.groupby(['itemId']) if len(g) == 4))
df_items_cat4 = pd.concat(g for _, g in df_items.groupby(['itemId']) if len(g) == 4)
df_items_cat4.head()

#Menampilkan sampel data yang memiliki jumlah kategori = 4

print('Empat kategori :', cat4)
print(df_items_cat4.category.value_counts(), '\n')

#Melihat apakah setiap item memiliki Lima kategory atau lebih
#Lima kategori

cat5 = len(pd.concat(g for _, g in df_items.groupby(['itemId']) if len(g) == 5))
df_items_cat5 = pd.concat(g for _, g in df_items.groupby(['itemId']) if len(g) == 5)
df_items_cat5.head()

#Menampilkan sampel data yang memiliki jumlah kategori = 5

print('Lima kategori :', cat5)
print(df_items_cat5.category.value_counts(), '\n')

#Visualisasi piecat

cat = np.array([cat1, cat2, cat3, cat4, cat5])
cat_percentile = []
for i in cat:
    x = i/np.sum(cat)
    cat_percentile.append(x)
     

fig, ax = plt.subplots(figsize = (8, 6))

labels = ['Satu Kategori', 'Dua Kategori', 'Tiga Kategori', 'Empat Kategori', 'Lima Kategori']
ax.pie(x = cat_percentile,
       autopct = '%1.2f%%')
ax.set_title(label = 'Komposisi items menurut jumlah kategorinya', size = 16)
ax.legend(labels, loc = 'upper right', bbox_to_anchor=(1.25, 0.9))
plt.show()

#Mengeliminasi baris yang memiliki nilai duplikat
#Hasil yang diinginkan berupa setiap item hanya memiliki satu kategori spesifik berdasarkan dataframe yang sudah dibagi berdasarkan jumlah kategorinya.

#Kategori 1
print(df_items_cat1.category.value_counts(),'\n')

#Kategori 2
df_items_cat2 = df_items_cat2[df_items_cat2['category'] == 'jual-flash-drives']
print(df_items_cat2.category.value_counts(),'\n')

#Kategori 3
df_items_cat3 = df_items_cat3[df_items_cat3['category'] == 'beli-smart-tv']
print(df_items_cat3.category.value_counts(),'\n')

#Kategori 4
df_items_cat4 = df_items_cat4[df_items_cat4['category'] == 'shop-televisi-digital']
print(df_items_cat4.category.value_counts(),'\n')

#Kategori 5
df_items_cat5 = df_items_cat5[df_items_cat5['category'] == 'beli-laptop']
print(df_items_cat5.category.value_counts())

#Menggabungkan dataframe

df_items_clean = pd.concat([df_items_cat1, df_items_cat2, df_items_cat3, df_items_cat4, df_items_cat5],
                          axis = 0)
df_items_clean.reset_index(drop= True, inplace = True)
print(df_items_clean.info(), '\n')
print(df_items_clean.category.value_counts())

#Menampilkan baris dengan brandName null
df_items_clean[df_items_clean['brandName'].isnull()]

#Mengganti brandName yang null menjadi WD
df_items_clean.brandName.fillna('WD', inplace = True)

#Menghapus kolom retrievedDate
df_items_clean = df_items_clean.drop('retrievedDate', axis = 1)

print(df_items_clean.info(), '\n')
print(df_items_clean.category.value_counts(), '\n')
df_items_clean.head()

"""**2. Data cleaning untuk data df_reviews**


"""

df_reviews.head(10)

#Menampilkan jumlah null values pada setiap kolom

pd.isnull(df_reviews).sum()

#Menampilkan jumlah category untuk setiap category

df_reviews.category.value_counts()

df_reviews.isnull()

df_reviews.columns

#Menampilkan julah null values pada setiap kolom

df_reviews[df_reviews['itemId'] == 100002528]

df_reviews_clean = df_reviews[df_reviews.set_index(['itemId', 'category']).index.isin(df_items_clean.set_index(['itemId', 'category']).index)]
print(df_reviews_clean.shape, '\n')
df_reviews_clean.head()

#Eliminasi duplikat
df_reviews_clean = df_reviews[df_reviews.set_index(['itemId', 'category']).index.isin(df_items_clean.set_index(['itemId', 'category']).index)]

print(df_reviews_clean.shape, '\n')
df_reviews_clean.head()

x = df_items_clean[df_items_clean['itemId'] == 100002528]
print(len(df_reviews_clean[df_reviews_clean['itemId'] == 100002528]))
y = df_reviews_clean[df_reviews_clean['itemId'] == 100002528]

#Mengecek apakah total review dari salah satu item sesuai dengan jumlah baris reviewnya
if x.totalReviews.item() == len(y):
    print(True)
else:
    print(False)

#Mengecek apakah kolom likeCount dan upVotes memiliki nilai yang sama
print(df_reviews_clean.likeCount.equals(df_reviews_clean.upVotes))

#Mengeliminasi kolom originalRating, likeCount, retrievedDate
df_reviews_clean = df_reviews_clean.drop(columns=['originalRating', 'likeCount', 'retrievedDate'])
df_reviews_clean.head()

print('Jumlah NaN value pada reviewTitle : ', len(df_reviews_clean[df_reviews_clean.reviewTitle.isna() == True]))

#Mengganti nilai NaN
df_reviews_clean.reviewTitle.fillna('Tanpa Judul', inplace = True)
print('Jumlah NaN value pada reviewTitle : ', len(df_reviews_clean[df_reviews_clean.reviewTitle.isna() == True]))

df_reviews_clean[df_reviews_clean.boughtDate.isna() == True].head()

"""3. df_merged (Merged DataFrame)

Menggabungkan kedua data yaitu df_items_clean dan df_reviews_clean menjadi satu
"""

#Menggabungkan dataframe
df_merged = pd.merge(df_items_clean, df_reviews_clean, left_on='itemId', right_on='itemId')\
                    .drop(['category_y', 'helpful', 'url'], axis = 1)\
                    .rename(columns = {'name_y' : 'reviewer',
                                       'name_x' : 'name',
                                       'category_x' : 'category'})
                                       
print(df_merged.shape)
df_merged.head()

"""**Visualisasi Data**

---



---


"""

fig, ax = plt.subplots(2, 1, figsize = (15, 10))
fig.tight_layout(pad = 5)

for ax, i, title in zip(ax.flatten(), [df_items_clean, df_reviews_clean], ['Items', 'Reviews']):
    #count = i.category.value_counts()
    index = i.category.value_counts().index
    
    sns.countplot(ax = ax, data = i, x = i.category, order = index)
    ax.set_title('Jumlah Tiap Kategori {}'.format(title), fontsize = 20)
    ax.set_ylabel('Total', fontsize = 16)
    ax.set_xticklabels(i.category.value_counts().index, fontsize = 16)
    ax.set_yticklabels(ax.get_yticks(), fontsize = 16)
    ax.set_xlabel('')
plt.show()

catlist = df_items_clean.category.unique()


fig, ax = plt.subplots(len(catlist), figsize = (15, 20))
fig.tight_layout(pad = 6)

for ax, i in zip(ax.flatten(), catlist):
    index = df_items_clean[df_items_clean['category'] == i]['brandName'].value_counts()
    
    sns.set_style('whitegrid')
    sns.countplot(ax = ax, data = df_items_clean, x = df_items_clean[df_items_clean['category'] == i]['brandName'], 
                  order = index.sort_values(ascending = False).index[:10])
    ax.set_title('10 Brand dengan Jumlah Tertinggi berdasarkan Kategori {}'.format(i), fontsize = 20)
    ax.set_ylabel('Total', fontsize = 16)
    ax.set_xticklabels(index.sort_values(ascending = False).index[:10], fontsize = 16)
    ax.set_yticklabels(ax.get_yticks(), fontsize = 16)
    ax.set_xlabel('')
plt.show()

fig, ax = plt.subplots(figsize = (8, 6))

index = df_merged.clientType.value_counts().sort_values(ascending = False).index
sns.countplot(data = df_merged, x = 'clientType', order = index)
ax.set_title('Komposisi Platform yang Digunakan oleh Reviewer', fontsize = 18)
ax.set_ylabel('')
ax.set_xticklabels(index, fontsize = 16)
ax.set_yticklabels(ax.get_yticks(), fontsize = 16)
plt.show()

#Format nilai besar
def large_tick_format(tick_value, pos):
    '''
    Mengubah tick yang memiliki nilai sangat besar(Miliar, Juta, Ribu) menjadi 
    B, M, K
    '''
    if tick_value >= 1000000000:
        value = round(tick_value/1000000000, 1)
        new_tick_format = '{:}B'.format(value)
    elif tick_value >= 1000000:
        value = round(tick_value/1000000, 1)
        new_tick_format = '{:}M'.format(value)
    elif tick_value >= 1000:
        new_tick_format = '{:}K'.format(value)
    elif tick_value < 1000:
        new_tick_format = round(tick_value, 1)
    else:
        new_tick_format = tick_value
    
    #Mengubah new_tick_format sebagai string
    new_tick_format = str(new_tick_format)
    
    #Mengubah contoh nilai 5.0 M agar menjadi 5 M
    decimal = new_tick_format.find('.')
    
    if decimal != -1:
        value_after_decimal = new_tick_format[decimal + 1]
        if value_after_decimal == '0':
            #menghapus 0 setelah desimal
            new_tick_format = new_tick_format[0:decimal] + new_tick_format[decimal + 2:]
    
    return new_tick_format

dfcat_list = [df_items_cat1, df_items_cat2, df_items_cat3, df_items_cat4, df_items_cat5]
cat = df_items_clean.category.unique()

fig, ax = plt.subplots(len(dfcat_list), figsize = (18, 30))
fig.tight_layout(pad = 5)
sns.set(font_scale = 1)

for ax, i in zip(ax.flatten(), dfcat_list):
    value = i.brandName.value_counts().sort_values(ascending = False).index[:10]
    x_data = i[i['brandName'].isin(value)]
    
    sns.swarmplot(ax = ax, data = x_data, x = x_data['brandName'], y = x_data['price'],
                order = value)
    ax.set_title('10 Produk dengan Jumlah Tertinggi dalam Kategori {} beserta Sebaran Harga'.format(i.category.unique()), fontsize = 20)
    ax.set_ylabel('Harga', fontsize = 16)
    ax.set_xlabel('')
    ax.set_xticklabels(value, size = 16)
    ax.set_yticklabels(ax.get_yticks(), size = 16)
    ax.yaxis.set_major_formatter(tick.FuncFormatter(large_tick_format))
     
plt.show()

"""Analisis Deret Waktu

Analisis deret waktu ini dilakukan untuk mendapatkan wawasan tentang tren pembelian dalam kurun waktu tertentu, baik berdasarkan kuantitas transaksi, maupun dari nilai total transaksi.
"""

#Mengubah kolom boughtDate pada df_merged menjadi tipe data datetime
month = {'Jan': '01', 'Feb' : '02', 'Mar' : '03', 'Apr' : '04', 'Mei' : '05',
            'Jun' : '06', 'Jul' : '07', 'Agu' : '08', 'Sep' : '09', 'Okt' : '10', 'Nov' : '11', 'Des' : '12', ' ' : '-'}

df_merged.boughtDate.replace(month, regex = True, inplace = True)
df_merged.boughtDate = pd.to_datetime(df_merged.boughtDate, format='%d-%m-%Y')
df_merged.head()

df_merged = df_merged.dropna(subset = ['boughtDate'], axis = 0)
df_merged[df_merged['boughtDate'].isna()]

#Membuat dataframe baru dengan kolom yang sudah dipilih

df_merged_ts = df_merged[['boughtDate', 'price']]
df_merged_ts = df_merged_ts.set_index('boughtDate')
df_merged_ts.sort_index(inplace = True)
df_merged_ts.head()

#Membuat kolom baru = count
df_merged_ts.insert(column = 'count', value = 1, loc = 1)
print(df_merged_ts.shape)
df_merged_ts.head()

#Detail dateseries
df_merged_ts['year'] = df_merged_ts.index.year
df_merged_ts['month'] = df_merged_ts.index.month
df_merged_ts['dayname'] = df_merged_ts.index.day_name()

df_merged_ts.head()

#Histogram count
plt.figure(figsize = (12, 8))

plt.hist(df_merged_ts.index, bins = 48, alpha = 0.6)
plt.title('Frekuensi Jumlah Transaksi', size = 18)
#plt.xlim('2014', '2019')
plt.xlabel('Jumlah Transaksi')
plt.ylabel('Frekuensi')
plt.show()

fig, ax = plt.subplots(3, 1, figsize = (12, 18))
fig.tight_layout(pad = 8)

sns.countplot(data = df_merged_ts, x = 'year', ax = ax[0])
ax[0].set_title('Jumlah Transaksi berdasarkan Tahun', size = 18)
ax[0].set_ylabel('')
ax[0].set_xlabel('Tahun')

sns.countplot(data = df_merged_ts, x = 'month', ax = ax[1])
ax[1].set_title('Jumlah Transaksi berdasarkan Bulan', size = 18)
ax[1].set_ylabel('')
ax[1].set_xlabel('Bulan')

sns.countplot(data = df_merged_ts, x = 'dayname', ax = ax[2], 
              order = [ "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"])
ax[2].set_title('Jumlah Transaksi berdasarkan Hari', size = 18)
ax[2].set_ylabel('')
ax[2].set_xlabel('Hari')

plt.show()

df_resampled = df_merged[['boughtDate']]
df_resampled.insert(column = 'count', value = 1, loc = 1)
df_resampled.head()
df_resampled = df_resampled.groupby('boughtDate').count()

year_list = ['2014', '2015', '2016', '2017', '2018', '2019']

fig, ax = plt.subplots(6,1, figsize = (15, 27))
fig.tight_layout(pad = 8)

for axis, i in zip(ax.flatten(), year_list):
        axis.plot(df_resampled.loc[i, 'count'], linewidth = 0.8, marker = '.', alpha = 0.7)
        axis.set_title('Pergerakan Transaksi Pada Tahun {}'.format(i), size = 16)
        axis.set_xlabel('')
        axis.set_ylabel('')

plt.show()

